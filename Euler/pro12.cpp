/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?*/

#include <iostream>
using std::cout;
using std::endl;
using std::fixed;
#include <cmath>
using std::sqrt;
#include <ctime>
using std::clock;

bool triangle( long long );
int numDiv( long long );

int main()
{
    cout << "Procesando... ";
    
    unsigned int nDiv = 0;
    int i,add;
    for( i=1, add=2; nDiv <= 500 ; i += add, add++)
    {
       nDiv = numDiv(i);
    }
    
    cout << i - (add-1) << endl;
    
    cout << fixed << ((float)clock()) / CLOCKS_PER_SEC << " seconds" << endl;
    
    return 0;
}

bool triangle( long long n )
{
   long long c = 0;
   for(long long i = 1; true; i++ )
   {
      if( c == n ) return true;
      c += i;
      if( c > n ) return false;
   }
}

int numDiv( long long n )
{
   unsigned int numDiv = 1;
   int add;
   if( !(n%2) ) add = 1; else add = 2;
   
   for( int i=1; i <= static_cast <int>(n/2); i += add) if( !(n%i) ) numDiv++;
   
   return numDiv;
}


